package com.sense.sdk.saml.service;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.Iterator;
import java.util.zip.Inflater;
import java.util.zip.InflaterInputStream;

import org.apache.commons.codec.binary.Base64;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;

import com.sense.sdk.saml.pojo.AuthnRequestField;

/**
 * 处理saml request请求对象
 *
 * @author LiangRiLu
 * @Time 2019年12月14日下午1:41:53
 */
public class AuthnRequestHandler {

	private static final String ISSUER = "Issuer";

	/**
	 * 解析saml request的base64字符串
	 *
	 * @param encodedAuthnRequest
	 *            base64加密过的字符串
	 * @return
	 */
	public AuthnRequestField handleAuthnRequest(String encodedAuthnRequest) {
		String authnRequestXml = decode(encodedAuthnRequest);
		System.out.println("解析后的SAMLRequest------------：" + authnRequestXml);
		return readeAuthnRequest(authnRequestXml);
	}

	@SuppressWarnings("unchecked")
	private AuthnRequestField readeAuthnRequest(String authnRequestXml) {
		if (authnRequestXml == null) {
			return null;
		}
		AuthnRequestField authnRequestField = new AuthnRequestField();
		Document doc = null;
		try {
			doc = DocumentHelper.parseText(authnRequestXml); // 将字符串转为XML
			Element rootElt = doc.getRootElement(); // 获取根节点
			String version = rootElt.attributeValue("Version");
			String ID = rootElt.attributeValue("ID");
			String destination = rootElt.attributeValue("Destination");
			String assertionCondumerServiceUrl = rootElt.attributeValue("AssertionConsumerServiceURL");
			String protocolBinding = rootElt.attributeValue("ProtocolBinding");
			Iterator<Element> elementIterator = rootElt.elementIterator();
			while (elementIterator.hasNext()) {
				Element element = elementIterator.next();
				if (ISSUER.equals(element.getName())) {
					authnRequestField.setSpIssuer(element.getTextTrim());
					break;
				}
			}
			authnRequestField.setVersion(version);
			authnRequestField.setRequestId(ID);
			authnRequestField.setDestination(destination);
			authnRequestField.setAssertionConsumerServiceUrl(assertionCondumerServiceUrl);
			authnRequestField.setProtocolBinding(protocolBinding);
			return authnRequestField;

		} catch (DocumentException e) {
			e.printStackTrace();

		}
		return null;
	}

	/**
	 * 解密请求参数
	 *
	 * @param encSAMLRequest
	 * @return
	 */
	private String decode(String encSAMLRequest) {
		String ret = null;
		byte[] decodedBytes = null;
		try {
			decodedBytes = new Base64().decode(encSAMLRequest.getBytes("UTF-8"));
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		try {
			ret = new String(inflate(decodedBytes, true));
		} catch (Exception ze) {
			ret = new String(decodedBytes);
		}
		return ret;
	}

	private byte[] inflate(byte[] bytes, boolean nowrap) throws Exception {
		Inflater decompressor = null;
		InflaterInputStream decompressorStream = null;
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		try {
			decompressor = new Inflater(nowrap);
			decompressorStream = new InflaterInputStream(new ByteArrayInputStream(bytes), decompressor);
			byte[] buf = new byte[1024];
			int count;
			while ((count = decompressorStream.read(buf)) != -1) {
				out.write(buf, 0, count);
			}
			return out.toByteArray();
		} finally {
			if (decompressor != null) {
				decompressor.end();
			}
			try {
				if (decompressorStream != null) {
					decompressorStream.close();
				}
			} catch (IOException ioe) {
				ioe.printStackTrace();
			}
			try {
				if (out != null) {
					out.close();
				}
			} catch (IOException ioe) {
				ioe.printStackTrace();
			}
		}
	}

	public static void main(String[] args) {
		String str = "";
		AuthnRequestHandler handler = new AuthnRequestHandler();
		handler.handleAuthnRequest(str);
	}
}
